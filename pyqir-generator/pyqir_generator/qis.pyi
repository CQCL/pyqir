# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

from typing import Callable
from pyqir_generator.builder import Builder
from pyqir_generator.value import Qubit, Ref


class BasicQisBuilder:
    def __init__(self, builder: Builder) -> None: ...

    def cx(self, control: Qubit, target: Qubit) -> None: ...

    def cz(self, control: Qubit, target: Qubit) -> None: ...

    def h(self, qubit: Qubit) -> None: ...

    def m(self, qubit: Qubit, result: Ref) -> None: ...

    def reset(self, qubit: Qubit) -> None: ...

    def rx(self, theta: float, qubit: Qubit) -> None: ...

    def ry(self, theta: float, qubit: Qubit) -> None: ...

    def rz(self, theta: float, qubit: Qubit) -> None: ...

    def s(self, qubit: Qubit) -> None: ...

    def s_adj(self, qubit: Qubit) -> None: ...

    def t(self, qubit: Qubit) -> None: ...

    def t_adj(self, qubit: Qubit) -> None: ...

    def x(self, qubit: Qubit) -> None: ...

    def y(self, qubit: Qubit) -> None: ...

    def z(self, qubit: Qubit) -> None: ...

    def if_result(
        self,
        result: Ref,
        one: Callable[[], None] = ...,
        zero: Callable[[], None] = ...,
    ) -> None: ...
